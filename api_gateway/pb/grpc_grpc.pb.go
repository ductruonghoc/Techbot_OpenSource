// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.0
// source: grpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExtractPdfServiceClient is the client API for ExtractPdfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtractPdfServiceClient interface {
	Extract(ctx context.Context, in *ExtractPdfRequest, opts ...grpc.CallOption) (*ExtractPdfResponse, error)
}

type extractPdfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExtractPdfServiceClient(cc grpc.ClientConnInterface) ExtractPdfServiceClient {
	return &extractPdfServiceClient{cc}
}

func (c *extractPdfServiceClient) Extract(ctx context.Context, in *ExtractPdfRequest, opts ...grpc.CallOption) (*ExtractPdfResponse, error) {
	out := new(ExtractPdfResponse)
	err := c.cc.Invoke(ctx, "/ExtractPdfService/Extract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtractPdfServiceServer is the server API for ExtractPdfService service.
// All implementations must embed UnimplementedExtractPdfServiceServer
// for forward compatibility
type ExtractPdfServiceServer interface {
	Extract(context.Context, *ExtractPdfRequest) (*ExtractPdfResponse, error)
	mustEmbedUnimplementedExtractPdfServiceServer()
}

// UnimplementedExtractPdfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExtractPdfServiceServer struct {
}

func (UnimplementedExtractPdfServiceServer) Extract(context.Context, *ExtractPdfRequest) (*ExtractPdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (UnimplementedExtractPdfServiceServer) mustEmbedUnimplementedExtractPdfServiceServer() {}

// UnsafeExtractPdfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtractPdfServiceServer will
// result in compilation errors.
type UnsafeExtractPdfServiceServer interface {
	mustEmbedUnimplementedExtractPdfServiceServer()
}

func RegisterExtractPdfServiceServer(s grpc.ServiceRegistrar, srv ExtractPdfServiceServer) {
	s.RegisterService(&ExtractPdfService_ServiceDesc, srv)
}

func _ExtractPdfService_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractPdfServiceServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExtractPdfService/Extract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractPdfServiceServer).Extract(ctx, req.(*ExtractPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtractPdfService_ServiceDesc is the grpc.ServiceDesc for ExtractPdfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtractPdfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ExtractPdfService",
	HandlerType: (*ExtractPdfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Extract",
			Handler:    _ExtractPdfService_Extract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// MbertChunkingServiceClient is the client API for MbertChunkingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MbertChunkingServiceClient interface {
	ChunkAndEmbed(ctx context.Context, in *MbertChunkingRequest, opts ...grpc.CallOption) (*MbertChunkingResponse, error)
}

type mbertChunkingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMbertChunkingServiceClient(cc grpc.ClientConnInterface) MbertChunkingServiceClient {
	return &mbertChunkingServiceClient{cc}
}

func (c *mbertChunkingServiceClient) ChunkAndEmbed(ctx context.Context, in *MbertChunkingRequest, opts ...grpc.CallOption) (*MbertChunkingResponse, error) {
	out := new(MbertChunkingResponse)
	err := c.cc.Invoke(ctx, "/MbertChunkingService/ChunkAndEmbed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MbertChunkingServiceServer is the server API for MbertChunkingService service.
// All implementations must embed UnimplementedMbertChunkingServiceServer
// for forward compatibility
type MbertChunkingServiceServer interface {
	ChunkAndEmbed(context.Context, *MbertChunkingRequest) (*MbertChunkingResponse, error)
	mustEmbedUnimplementedMbertChunkingServiceServer()
}

// UnimplementedMbertChunkingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMbertChunkingServiceServer struct {
}

func (UnimplementedMbertChunkingServiceServer) ChunkAndEmbed(context.Context, *MbertChunkingRequest) (*MbertChunkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkAndEmbed not implemented")
}
func (UnimplementedMbertChunkingServiceServer) mustEmbedUnimplementedMbertChunkingServiceServer() {}

// UnsafeMbertChunkingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MbertChunkingServiceServer will
// result in compilation errors.
type UnsafeMbertChunkingServiceServer interface {
	mustEmbedUnimplementedMbertChunkingServiceServer()
}

func RegisterMbertChunkingServiceServer(s grpc.ServiceRegistrar, srv MbertChunkingServiceServer) {
	s.RegisterService(&MbertChunkingService_ServiceDesc, srv)
}

func _MbertChunkingService_ChunkAndEmbed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MbertChunkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MbertChunkingServiceServer).ChunkAndEmbed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MbertChunkingService/ChunkAndEmbed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MbertChunkingServiceServer).ChunkAndEmbed(ctx, req.(*MbertChunkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MbertChunkingService_ServiceDesc is the grpc.ServiceDesc for MbertChunkingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MbertChunkingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MbertChunkingService",
	HandlerType: (*MbertChunkingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChunkAndEmbed",
			Handler:    _MbertChunkingService_ChunkAndEmbed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// RagServiceClient is the client API for RagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RagServiceClient interface {
	Query(ctx context.Context, in *RagRequest, opts ...grpc.CallOption) (*RagResponse, error)
}

type ragServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRagServiceClient(cc grpc.ClientConnInterface) RagServiceClient {
	return &ragServiceClient{cc}
}

func (c *ragServiceClient) Query(ctx context.Context, in *RagRequest, opts ...grpc.CallOption) (*RagResponse, error) {
	out := new(RagResponse)
	err := c.cc.Invoke(ctx, "/RagService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RagServiceServer is the server API for RagService service.
// All implementations must embed UnimplementedRagServiceServer
// for forward compatibility
type RagServiceServer interface {
	Query(context.Context, *RagRequest) (*RagResponse, error)
	mustEmbedUnimplementedRagServiceServer()
}

// UnimplementedRagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRagServiceServer struct {
}

func (UnimplementedRagServiceServer) Query(context.Context, *RagRequest) (*RagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedRagServiceServer) mustEmbedUnimplementedRagServiceServer() {}

// UnsafeRagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RagServiceServer will
// result in compilation errors.
type UnsafeRagServiceServer interface {
	mustEmbedUnimplementedRagServiceServer()
}

func RegisterRagServiceServer(s grpc.ServiceRegistrar, srv RagServiceServer) {
	s.RegisterService(&RagService_ServiceDesc, srv)
}

func _RagService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RagService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceServer).Query(ctx, req.(*RagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RagService_ServiceDesc is the grpc.ServiceDesc for RagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RagService",
	HandlerType: (*RagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _RagService_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// RagServiceWithDeviceIDClient is the client API for RagServiceWithDeviceID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RagServiceWithDeviceIDClient interface {
	Query(ctx context.Context, in *RagWithDeviceIDRequest, opts ...grpc.CallOption) (*RagResponse, error)
}

type ragServiceWithDeviceIDClient struct {
	cc grpc.ClientConnInterface
}

func NewRagServiceWithDeviceIDClient(cc grpc.ClientConnInterface) RagServiceWithDeviceIDClient {
	return &ragServiceWithDeviceIDClient{cc}
}

func (c *ragServiceWithDeviceIDClient) Query(ctx context.Context, in *RagWithDeviceIDRequest, opts ...grpc.CallOption) (*RagResponse, error) {
	out := new(RagResponse)
	err := c.cc.Invoke(ctx, "/RagServiceWithDeviceID/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RagServiceWithDeviceIDServer is the server API for RagServiceWithDeviceID service.
// All implementations must embed UnimplementedRagServiceWithDeviceIDServer
// for forward compatibility
type RagServiceWithDeviceIDServer interface {
	Query(context.Context, *RagWithDeviceIDRequest) (*RagResponse, error)
	mustEmbedUnimplementedRagServiceWithDeviceIDServer()
}

// UnimplementedRagServiceWithDeviceIDServer must be embedded to have forward compatible implementations.
type UnimplementedRagServiceWithDeviceIDServer struct {
}

func (UnimplementedRagServiceWithDeviceIDServer) Query(context.Context, *RagWithDeviceIDRequest) (*RagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedRagServiceWithDeviceIDServer) mustEmbedUnimplementedRagServiceWithDeviceIDServer() {
}

// UnsafeRagServiceWithDeviceIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RagServiceWithDeviceIDServer will
// result in compilation errors.
type UnsafeRagServiceWithDeviceIDServer interface {
	mustEmbedUnimplementedRagServiceWithDeviceIDServer()
}

func RegisterRagServiceWithDeviceIDServer(s grpc.ServiceRegistrar, srv RagServiceWithDeviceIDServer) {
	s.RegisterService(&RagServiceWithDeviceID_ServiceDesc, srv)
}

func _RagServiceWithDeviceID_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RagWithDeviceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RagServiceWithDeviceIDServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RagServiceWithDeviceID/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RagServiceWithDeviceIDServer).Query(ctx, req.(*RagWithDeviceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RagServiceWithDeviceID_ServiceDesc is the grpc.ServiceDesc for RagServiceWithDeviceID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RagServiceWithDeviceID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RagServiceWithDeviceID",
	HandlerType: (*RagServiceWithDeviceIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _RagServiceWithDeviceID_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// SummarizeQueryServiceClient is the client API for SummarizeQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummarizeQueryServiceClient interface {
	Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (*SummarizeResponse, error)
}

type summarizeQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummarizeQueryServiceClient(cc grpc.ClientConnInterface) SummarizeQueryServiceClient {
	return &summarizeQueryServiceClient{cc}
}

func (c *summarizeQueryServiceClient) Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (*SummarizeResponse, error) {
	out := new(SummarizeResponse)
	err := c.cc.Invoke(ctx, "/SummarizeQueryService/Summarize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummarizeQueryServiceServer is the server API for SummarizeQueryService service.
// All implementations must embed UnimplementedSummarizeQueryServiceServer
// for forward compatibility
type SummarizeQueryServiceServer interface {
	Summarize(context.Context, *SummarizeRequest) (*SummarizeResponse, error)
	mustEmbedUnimplementedSummarizeQueryServiceServer()
}

// UnimplementedSummarizeQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSummarizeQueryServiceServer struct {
}

func (UnimplementedSummarizeQueryServiceServer) Summarize(context.Context, *SummarizeRequest) (*SummarizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summarize not implemented")
}
func (UnimplementedSummarizeQueryServiceServer) mustEmbedUnimplementedSummarizeQueryServiceServer() {}

// UnsafeSummarizeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummarizeQueryServiceServer will
// result in compilation errors.
type UnsafeSummarizeQueryServiceServer interface {
	mustEmbedUnimplementedSummarizeQueryServiceServer()
}

func RegisterSummarizeQueryServiceServer(s grpc.ServiceRegistrar, srv SummarizeQueryServiceServer) {
	s.RegisterService(&SummarizeQueryService_ServiceDesc, srv)
}

func _SummarizeQueryService_Summarize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummarizeQueryServiceServer).Summarize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SummarizeQueryService/Summarize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummarizeQueryServiceServer).Summarize(ctx, req.(*SummarizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SummarizeQueryService_ServiceDesc is the grpc.ServiceDesc for SummarizeQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummarizeQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SummarizeQueryService",
	HandlerType: (*SummarizeQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Summarize",
			Handler:    _SummarizeQueryService_Summarize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
